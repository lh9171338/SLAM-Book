#include <iostream>
#include <vector>
#include <string>
#include <opencv2/opencv.hpp>
#include "DBoW3/DBoW3.h"

using namespace cv;
using namespace std;

/***************************************************
 * 本节演示了如何根据前面训练的字典计算相似性评分
 * ************************************************/
int main(int argc, char** argv)
{
    // read the images and database
    cout << "reading database" << endl;
//    DBoW3::Vocabulary vocab("../../vocabulary.yml");
    DBoW3::Vocabulary vocab("../../vocab_larger.yml");  // use large vocab if you want:
    if(vocab.empty())
    {
        cerr << "Vocabulary does not exist." << endl;
        return 1;
    }
    cout << "reading images... " << endl;
    string dataset_dir = argv[1];
    vector<Mat> images;
    for(int i=0; i<10; i++)
    {
        string path = dataset_dir+"/"+to_string(i+1)+".png";
        images.push_back(imread(path));
    }

    // NOTE: in this case we are comparing images with a vocabulary generated by themselves, this may leed to overfitting.
    // detect ORB features
    cout << "detecting ORB features ... " << endl;
    Ptr<Feature2D> detector = ORB::create();
    vector<Mat> descriptors;
    vector<DBoW3::BowVector> bowvectors;
    for(Mat& image:images)
    {
        vector<KeyPoint> keypoints;
        Mat descriptor;
        detector->detectAndCompute(image, Mat(), keypoints, descriptor);
        descriptors.push_back(descriptor);
        DBoW3::BowVector bowvector;
        vocab.transform(descriptor, bowvector);
        bowvectors.push_back(bowvector);
    }

    // we can compare the images directly or we can compare one image to a database
    // images :
    cout << "comparing images with images " << endl;
    int num_images = images.size();
    for(int i=0; i<num_images; i++)
    {
        DBoW3::BowVector v1 = bowvectors[i];
        for(int j=i; j<num_images; j++)
        {
            DBoW3::BowVector v2 = bowvectors[j];
            double score = vocab.score(v1, v2);
            cout << "image " << i << " vs image " << j << " : " << score << endl;
        }
        cout << endl;
    }

    // or with database
    cout << "comparing images with database " << endl;
    DBoW3::Database db(vocab, true, 0);
    for(int i=0; i<num_images; i++)
        db.add(descriptors[i]);
    cout << "database info: " << db << endl;
    for(int i=0; i<num_images; i++)
    {
        DBoW3::QueryResults ret;
        db.query(descriptors[i], ret, 4);      // max result=4
        cout << "searching for image "<< i << " returns " << ret << endl << endl;
    }
    cout << "done." << endl;
}